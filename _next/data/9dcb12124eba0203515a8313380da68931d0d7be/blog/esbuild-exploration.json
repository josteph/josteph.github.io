{"pageProps":{"slug":"esbuild-exploration","meta":{"title":"Using esbuild As Your New Bundler","description":"Thoughts regarding esbuild as replacement of existing bundlers & babel for developing packages.","published":"March 8, 2021"},"content":"<h1>Using esbuild As Your New Bundler</h1>\n<p>Published on March 8, 2021</p>\n<hr>\n<p>You might have heard about <a href=\"https://esbuild.github.io/\">esbuild</a> before even reading this post. If you did, that's great! But if you never heard about it before this, or at least you haven't tried it, then <strong>you should!</strong></p>\n<p>You can make esbuild to become either a bundler, or just simply use it as a compiler in replacement of babel.</p>\n<h2>As Babel replacement, seriously?</h2>\n<p>We all know about babel, how powerful babel is, and how babel has helped us building great stuffs all around the web. But in for large scale project, you might have experienced that the build time takes very long! This might become one of the biggest productivity blocker.</p>\n<p>Babel simply has more overhead cost than esbuild. Even if you cache the loader, esbuild is much much faster. Although, esbuild even put <a href=\"https://esbuild.github.io/plugins/#plugin-api-limitations\">restriction</a> for when writing plugin, so you might want to know this before really replacing babel, especially if you depend on specific babel plugins that is not present in esbuild.</p>\n<p>Let us talk about how to replace babel with esbuild. But before this, you should know that babel can simply take a folder as entry points, but in esbuild you need to <strong>specify</strong> all the file paths that you are going to compile as an array of paths.</p>\n<p>I suggest you to start from using <strong>Typescript</strong> because esbuild supports typescript natively, without adding new plugin. Therefore, I can say that probably it doesn't have any performance impact when you are compiling typescript or normal javascript files, unlike Babel.</p>\n<p>If you are using typescript, you can get the list of needed files by using this method:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// getTSConfig.js</span>\n\n<span class=\"token keyword\">const</span> ts <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'typescript'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getTSConfig</span><span class=\"token punctuation\">(</span>configPath <span class=\"token operator\">=</span> <span class=\"token string\">'tsconfig.json'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tsConfigFile <span class=\"token operator\">=</span> ts<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findConfigFile</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ts<span class=\"token punctuation\">.</span><span class=\"token property-access\">sys</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">fileExists</span><span class=\"token punctuation\">,</span> configPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tsConfigFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">tsconfig.json does not exist in the current directory: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> configFile <span class=\"token operator\">=</span> ts<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readConfigFile</span><span class=\"token punctuation\">(</span>tsConfigFile<span class=\"token punctuation\">,</span> ts<span class=\"token punctuation\">.</span><span class=\"token property-access\">sys</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">readFile</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>configFile<span class=\"token punctuation\">.</span><span class=\"token property-access\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cannot read TS configuration file from </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>configFile<span class=\"token punctuation\">.</span><span class=\"token property-access\">error</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> tsConfig <span class=\"token operator\">=</span> ts<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parseJsonConfigFileContent</span><span class=\"token punctuation\">(</span>configFile<span class=\"token punctuation\">.</span><span class=\"token property-access\">config</span><span class=\"token punctuation\">,</span> ts<span class=\"token punctuation\">.</span><span class=\"token property-access\">sys</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> tsConfig<span class=\"token punctuation\">,</span> tsConfigFile <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> getTSConfig<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Now, let's pair it together with esbuild:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> startService <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'esbuild'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> getTSConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./getTSConfig'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> tsConfig<span class=\"token punctuation\">,</span> tsConfigFile <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getTSConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> service <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">startService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    color<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    entryPoints<span class=\"token operator\">:</span> tsConfig<span class=\"token punctuation\">.</span><span class=\"token property-access\">fileNames</span><span class=\"token punctuation\">,</span>\n    outdir<span class=\"token operator\">:</span> <span class=\"token constant\">OUT_DIR</span><span class=\"token punctuation\">,</span>\n    loader<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'.js'</span><span class=\"token operator\">:</span> <span class=\"token string\">'jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// if you are also compiling react files</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    format<span class=\"token operator\">:</span> <span class=\"token string\">'esm'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// can be also 'cjs'</span>\n    target<span class=\"token operator\">:</span> <span class=\"token string\">'es2015'</span><span class=\"token punctuation\">,</span>\n    minify<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    bundle<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    tsconfig<span class=\"token operator\">:</span> tsConfigFile<span class=\"token punctuation\">,</span>\n    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// optional</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> service<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">build</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">finally</span> <span class=\"token punctuation\">{</span>\n    service<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>What about compiling file assets?</h3>\n<p>Using the configuration above, esbuild will skip to compile every files with extension that typescript unable to read. That means, if you are importing images in your js/ts files, they won't be exported in the out directory. This could lead to build time error.</p>\n<p>Fortunately, here is a piece of code you might want to consider adding <strong>after the build process is finished</strong>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span>\n\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> cpy <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cpy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> relativeOutDir <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">relative</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SRC_DIR</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">OUT_DIR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">cpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'**'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">!**/*.{js,ts,jx,tsx}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> relativeOutDir<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      cwd<span class=\"token operator\">:</span> <span class=\"token constant\">SRC_DIR</span><span class=\"token punctuation\">,</span>\n      parents<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><strong>And you're done!</strong></p>\n<p>If you are curious about the timing, try logging the time before &#x26; after each processes (build &#x26; copy).</p>\n<h2>Using together with existing bundler</h2>\n<p>If you are using webpack, I suggest you to have a look into <a href=\"https://github.com/privatenumber/esbuild-loader\">esbuild-loader</a>.</p>\n<p>If you are using rollup, there is also existing <a href=\"https://github.com/egoist/rollup-plugin-esbuild\">plugin</a> to pair with esbuild. You can refer to the <a href=\"https://github.com/josteph/elastic-node-example/blob/main/rollup.config.js\">full configuration</a> I have tried before writing this post.</p>\n<p>There is not much to be explained, but simply follow the instructions given in their README.</p>\n<h2>Conclusion</h2>\n<p>It is not easy to fully migrate from existing build tools, there are also many unexplained limitations or edge cases of esbuild in this blog. Although, you may find several testimonies about the significant speed improvements <a href=\"https://github.com/privatenumber/esbuild-loader/issues/13\">here</a>.</p>\n<p>If you are not convinced yet, just give it a try 😉</p>\n<hr>\n"},"__N_SSG":true}