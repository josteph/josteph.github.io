{"pageProps":{"docs":[{"slug":"esbuild-exploration","meta":{"title":"Using esbuild As Your New Bundler","description":"Thoughts regarding esbuild as replacement of existing bundlers & babel for developing packages.","published":"March 8, 2021"},"content":"\n# Using esbuild As Your New Bundler\n\nPublished on March 8, 2021\n\n---\n\nYou might have heard about [esbuild](https://esbuild.github.io/) before even reading this post. If you did, that's great! But if you never heard about it before this, or at least you haven't tried it, then **you should!**\n\nYou can make esbuild to become either a bundler, or just simply use it as a compiler in replacement of babel.\n\n## Replacing Babel\n\nWe all know about babel, how powerful babel is, and how babel has helped us building great stuffs all around the web. But in for large scale project, you might have experienced that the build time takes very long! This might become one of the biggest productivity blocker.\n\nBabel simply has more overhead cost than esbuild. Even if you cache the loader, esbuild is much much faster. Although, esbuild even put [restriction](https://esbuild.github.io/plugins/#plugin-api-limitations) for when writing plugin, so you might want to know this before really replacing babel, especially if you depend on specific babel plugins that is not present in esbuild.\n\nLet us talk about how to replace babel with esbuild. But before this, you should know that babel can simply take a folder as entry points, but in esbuild you need to **specify** all the file paths that you are going to compile as an array of paths.\n\nI suggest you to start from using **Typescript** because esbuild supports typescript natively, without adding new plugin. Therefore, I can say that probably it doesn't have any performance impact when you are compiling typescript or normal javascript files, unlike Babel.\n\nIf you are using typescript, you can get the list of needed files by using this method:\n\n```js\n// getTSConfig.js\n\nconst ts = require('typescript');\n\nfunction getTSConfig(configPath = 'tsconfig.json') {\n  const tsConfigFile = ts.findConfigFile(process.cwd(), ts.sys.fileExists, configPath);\n\n  if (!tsConfigFile) {\n    throw new Error(`tsconfig.json does not exist in the current directory: ${process.cwd()}`);\n  }\n\n  const configFile = ts.readConfigFile(tsConfigFile, ts.sys.readFile);\n\n  if (configFile.error) {\n    throw new Error(`Cannot read TS configuration file from ${process.cwd()}: ${configFile.error}`);\n  }\n\n  const tsConfig = ts.parseJsonConfigFileContent(configFile.config, ts.sys, process.cwd());\n\n  return { tsConfig, tsConfigFile };\n}\n\nmodule.exports = getTSConfig;\n```\n\nNow, let's pair it together with esbuild:\n\n```js\nconst { startService } = require('esbuild');\nconst getTSConfig = require('./getTSConfig');\n\nasync function build() {\n  const { tsConfig, tsConfigFile } = getTSConfig();\n  const service = await startService();\n\n  const options = {\n    color: true,\n    entryPoints: tsConfig.fileNames,\n    outdir: OUT_DIR,\n    loader: {\n      '.js': 'jsx', // if you are also compiling react files\n    },\n    format: 'esm', // can be also 'cjs'\n    target: 'es2015',\n    minify: false,\n    bundle: false,\n    tsconfig: tsConfigFile,\n    plugins: [], // optional\n  };\n\n  try {\n    await service.build(options);\n  } catch (error) {\n    console.error(error);\n  } finally {\n    service.stop();\n  }\n}\n```\n\n### Compiling other file assets\n\nUsing the configuration above, esbuild will skip to compile every files with extension that typescript unable to read. That means, if you are importing images in your js/ts files, they won't be exported in the out directory. This could lead to build time error.\n\nFortunately, here is a piece of code you might want to consider adding **after the build process is finished**:\n\n```js\nasync function build() {\n  ...\n\n  try {\n    const cpy = require('cpy');\n    const relativeOutDir = path.relative(SRC_DIR, OUT_DIR);\n\n    await cpy(['**', `!**/*.{js,ts,jx,tsx}`], relativeOutDir, {\n      cwd: SRC_DIR,\n      parents: true,\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n**And you're done!**\n\nIf you are curious about the timing, try logging the time before & after each processes (build & copy).\n\n## Using with existing bundler\n\nIf you are using webpack, I suggest you to have a look into [esbuild-loader](https://github.com/privatenumber/esbuild-loader).\n\nIf you are using rollup, there is also existing [plugin](https://github.com/egoist/rollup-plugin-esbuild) to pair with esbuild. You can refer to the [full configuration](https://github.com/josteph/elastic-node-example/blob/main/rollup.config.js) I have tried before writing this post.\n\nThere is not much to be explained, but simply follow the instructions given in their README.\n\n## Conclusion\n\nIt is not easy to fully migrate from existing build tools, there are also many unexplained limitations or edge cases of esbuild in this blog. Although, you may find several testimonies about the significant speed improvements [here](https://github.com/privatenumber/esbuild-loader/issues/13).\n\nIf you are not convinced yet, just give it a try ðŸ˜‰\n\n---\n"}]},"__N_SSG":true}